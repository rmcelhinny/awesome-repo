{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Ryan-DF"
		},
		"AZDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AZDatabase'"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"DynamicAzureDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DynamicAzureDatabase'"
		},
		"rmcelhinnyKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://rmcelhinnyKV.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic Extract Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProcessName",
							"value": {
								"value": "@pipeline().parameters.ProcessName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fetch Metadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ProcessName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "RunKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select \ncast(ControlTableKey as varchar(10)) as ControlTableKey ,\nProcessName,\nSourceSchemaName,\nSourceTableName,\nSourceServerName,\nSourceDatabaseName,\nSourceUserName,\nSourcePassword,\nTargetTableSchema,\nTargetTableName,\nTargetServerName,\nTargetDatabaseName,\nTargetUserName,\nTargetPassword,\nContainerName,\nDelimiter\nfrom ProcessMetadata.ControlTable\nWhere IsIncludedinExtract = 1\nand ProcessName = '@{variables('ProcessName')}'\norder by 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Extract and Populate DDL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Fetch Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Fetch MetaData').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SourceTableName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceTableName",
										"value": {
											"value": "@item().SourceTableName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourceSchemaName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceSchemaName",
										"value": {
											"value": "@item().SourceSchemaName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourceServerName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceServerName",
										"value": {
											"value": "@item().SourceServerName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourceDatabaseName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceDatabaseName",
										"value": {
											"value": "@item().SourceDatabaseName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourceUserName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceUserName",
										"value": {
											"value": "@item().SourceUserName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourcePassword",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourcePassword",
										"value": {
											"value": "@item().SourcePassword",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ControlTableKey",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ControlTableKey",
										"value": {
											"value": "@item().ControlTableKey",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SysQuery",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SourceTableName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourceSchemaName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourceServerName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourceDatabaseName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourceUserName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourcePassword",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ControlTableKey",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TargetServerName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TargetDatabaseName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TargetUserName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TargetPassword",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SysQuery",
										"value": {
											"value": "select\n@{variables('ControlTableKey')} as ControlTableKey,\n'@{variables('SourceSchemaName')}' as SourceTableSchema,\n'@{variables('SourceTableName')}' as SourceTableName,\nb.column_id as OrdinalPosition,\nb.name as SourceColumn,\nd.name as SourceColumnDataType,\ncase when d.name like '%numeric%' OR d.name like '%float%' OR d.name like '%decimal%' then b.precision\n    WHEN D.name LIKE '%money%' THEN 34\nelse b.max_length end as Length,\nCASE WHEN D.name LIKE '%money%' THEN 4 ELSE b.scale end as Scale,\nb.is_nullable as Nullable,\ncase when d.name like '%varchar%' then 'string'\n     when d.name like '%timestamp%' then 'string'  \n     when d.name like '%date%' then 'string'  \n     when d.name like '%time%' then 'string'  \n     when d.name like '%number%' then 'float'\n     when d.name like '%bit%' then 'string'\n     WHEN D.name LIKE '%money%' THEN 'float'\nelse d.name end as DatabricksDataTypeExternal,\ncase when d.name like '%varchar%' then 'string'\n     when d.name like '%time%' or d.name like '%date%' then 'timestamp'\n     when d.name like '%number%' then 'float'  \n     when d.name like '%bit%' then 'string'\n     WHEN D.name LIKE '%money%' THEN 'float'\nelse d.name end as DatabricksDataType,\nd.name as SQLDataType\n from sys.tables a\njoin sys.columns b\non a.object_id = b.object_id\njoin sys.schemas c\non a.schema_id = c.schema_id\njoin sys.types d\non b.system_type_id = d.system_type_id\nwhere d.name <> 'sysname'\nand a.name = '@{variables('SourceTableName')}'\norder by b.column_id ",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Extract DDL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SysQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@variables('SysQuery')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "delete from ProcessMetadata.SourceTableColumns where controltablekey = @{variables('ControlTableKey')}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableSchema": {
													"value": "@variables('SourceSchemaName')",
													"type": "Expression"
												},
												"TableName": {
													"value": "@variables('SourceTableName')",
													"type": "Expression"
												},
												"ServerName": {
													"value": "@variables('SourceServerName')",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@variables('SourceDatabaseName')",
													"type": "Expression"
												},
												"UserName": {
													"value": "@variables('SourceUserName')",
													"type": "Expression"
												},
												"Password": {
													"value": "@variables('SourcePassword')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableSchema": "ProcessMetadata",
												"TableName": "SourceTableColumns",
												"ServerName": {
													"value": "@variables('TargetServerName')",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@variables('TargetDatabaseName')",
													"type": "Expression"
												},
												"UserName": {
													"value": "@variables('TargetUserName')",
													"type": "Expression"
												},
												"Password": {
													"value": "@variables('TargetPassword')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "TargetServerName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TargetServerName",
										"value": {
											"value": "@item().TargetServerName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TargetDatabaseName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TargetDatabaseName",
										"value": {
											"value": "@item().TargetDatabaseName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TargetUserName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TargetUserName",
										"value": {
											"value": "@item().TargetUserName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TargetPassword",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TargetPassword",
										"value": {
											"value": "@item().TargetPassword",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Generate Extract SQL",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Extract DDL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ProcessMetadata].[GenerateSQLQuery]",
										"storedProcedureParameters": {
											"ControlTableKey": {
												"value": {
													"value": "@variables('ControlTableKey')",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceTableName": {
												"value": {
													"value": "@variables('SourceTableName')",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableSchema": {
												"value": {
													"value": "@variables('SourceSchemaName')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AZDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Generate Text Files to BLOB",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Extract and Populate DDL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select \ncast(ct.ControlTableKey as varchar(10)) as ControlTableKey ,\nct.ProcessName,\nct.SourceSchemaName,\nct.SourceTableName,\nct.SourceServerName,\nct.SourceDatabaseName,\nct.SourceUserName,\nct.SourcePassword,\nct.TargetTableSchema,\nct.TargetTableName,\nct.TargetServerName,\nct.TargetDatabaseName,\nct.TargetUserName,\nct.TargetPassword,\nct.ContainerName,\nct.Delimiter,\nqg.FullSQLQuery\nfrom ProcessMetadata.ControlTable ct\njoin ProcessMetadata.QueryGeneration qg\non ct.ControlTableKey = qg.ControlTableKey\nand ct.SourceTableName = qg.SourceTableName\nWhere IsIncludedinExtract = 1\nand ProcessName = '@{variables('ProcessName')}'\norder by 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Extract Data",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Generate Text Files to BLOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Generate Text Files to BLOB').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "File Extract",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "FileLogDetailInsert",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@item().FullSQLQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableSchema": {
													"value": "@variables('SourceSchemaName')",
													"type": "Expression"
												},
												"TableName": {
													"value": "@variables('SourceTableName')",
													"type": "Expression"
												},
												"ServerName": {
													"value": "@variables('SourceServerName')",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@variables('SourceDatabaseName')",
													"type": "Expression"
												},
												"UserName": {
													"value": "@variables('SourceUserName')",
													"type": "Expression"
												},
												"Password": {
													"value": "@variables('SourcePassword')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BLOBExtract",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@{variables('SourceTableName')}/@{variables('SourceTableName')}.txt",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "FileLogDetailInsert",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ProcessMetadata].[FileLogDetailInsert]",
										"storedProcedureParameters": {
											"ControlTableKey": {
												"value": {
													"value": "@variables('ControlTableKey')",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"FileName": {
												"value": {
													"value": "@variables('SourceTableName')",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProcessName": {
												"value": {
													"value": "@variables('ProcessName')",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunKey": {
												"value": {
													"value": "@variables('RunKey')",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceTableName": {
												"value": {
													"value": "@{variables('SourceSchemaName')}.@{variables('SourceTableName')}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AZDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "File Extract",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ProcessMetadata].[FileLogDetailUpdate]",
										"storedProcedureParameters": {
											"ControlTableKey": {
												"value": {
													"value": "@variables('ControlTableKey')",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"FileName": {
												"value": {
													"value": "@{variables('SourceTableName')}.txt",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{variables('SourceSchemaName')}.@{variables('SourceTableName')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "S",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AZDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "File Extract",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ProcessMetadata].[FileLogDetailUpdate]",
										"storedProcedureParameters": {
											"ControlTableKey": {
												"value": {
													"value": "@variables('ControlTableKey')",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"FileName": {
												"value": {
													"value": "@{variables('SourceTableName')}.txt",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceTableName": {
												"value": {
													"value": "@{variables('SourceSchemaName')}.@{variables('SourceTableName')}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "F",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AZDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "RunKey",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunKey",
							"value": {
								"value": "@pipeline().parameters.RunKey",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					},
					"RunKey": {
						"type": "string"
					}
				},
				"variables": {
					"ProcessName": {
						"type": "String"
					},
					"SourceTableName": {
						"type": "String"
					},
					"SourceSchemaName": {
						"type": "String"
					},
					"SourceServerName": {
						"type": "String"
					},
					"SourceDatabaseName": {
						"type": "String"
					},
					"SourceUserName": {
						"type": "String"
					},
					"SourcePassword": {
						"type": "String"
					},
					"SysQuery": {
						"type": "String"
					},
					"ControlTableKey": {
						"type": "String"
					},
					"TargetServerName": {
						"type": "String"
					},
					"TargetDatabaseName": {
						"type": "String"
					},
					"TargetUserName": {
						"type": "String"
					},
					"TargetPassword": {
						"type": "String"
					},
					"RunKey": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azure Extract"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/AZDatabase')]",
				"[concat(variables('factoryId'), '/datasets/BLOBExtract')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Run Movies Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Movies Lookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "RunKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select distinct ProcessName, '@{variables('RunKey')}' as RunKey\nfrom ProcessMetadata.ControlTable\nwhere ProcessName = 'Movies'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Movies Extract",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Movies Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Dynamic Extract Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ProcessName": {
									"value": "@activity('Movies Lookup').output.value[0].ProcessName",
									"type": "Expression"
								},
								"RunKey": {
									"value": "@activity('Movies Lookup').output.value[0].RunKey",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Generate RunKey",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ProcessMetadata].[LogRunKey]",
								"storedProcedureParameters": {
									"ProcessName": {
										"type": "String",
										"value": "Movies"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "RunKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Generate RunKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunKey",
							"value": {
								"value": "@replace(replace(string(activity('Generate RunKey').output.firstrow),'{\"\":\"',''),'\"}','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log RunKey as Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Movies Extract",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ProcessMetadata].[UpdateLogRunKey]",
							"storedProcedureParameters": {
								"ProcessName": {
									"value": "Movies",
									"type": "String"
								},
								"RunKey": {
									"value": {
										"value": "@variables('RunKey')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Status": {
									"value": "S",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AZDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log RunKey as Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Movies Extract",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ProcessMetadata].[UpdateLogRunKey]",
							"storedProcedureParameters": {
								"ProcessName": {
									"value": "Movies",
									"type": "String"
								},
								"RunKey": {
									"value": {
										"value": "@variables('RunKey')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Status": {
									"value": "F",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AZDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"variables": {
					"RunKey": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azure Extract"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Dynamic Extract Pipeline')]",
				"[concat(variables('factoryId'), '/linkedServices/AZDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ControlTableKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceTableSchema",
						"type": "varchar"
					},
					{
						"name": "SourceTableName",
						"type": "varchar"
					},
					{
						"name": "OrdinalPosition",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceColumn",
						"type": "varchar"
					},
					{
						"name": "SourceColumnDataType",
						"type": "varchar"
					},
					{
						"name": "Length",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Scale",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nullable",
						"type": "bit"
					},
					{
						"name": "DatabricksDataTypeExternal",
						"type": "varchar"
					},
					{
						"name": "DatabricksDataType",
						"type": "varchar"
					},
					{
						"name": "SQLDataType",
						"type": "varchar"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLOBExtract')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "azureefileextract"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicAzureDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"Password": {
							"value": "@dataset().Password",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"TableSchema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().TableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AZDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicAzureDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DynamicAzureDatabase_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "rmcelhinnyKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().Password",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rmcelhinnyKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rmcelhinnyKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('rmcelhinnyKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		}
	]
}