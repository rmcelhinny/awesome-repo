{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Ryan-DF"
		},
		"AZDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AZDatabase'"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"DynamicAzureDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DynamicAzureDatabase'"
		},
		"rmcelhinnyKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://rmcelhinnyKV.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic Extract Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProcessName",
							"value": {
								"value": "@pipeline().parameters.ProcessName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fetch MetaData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ProcessName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select \ncast(ControlTableKey as varchar(10)) as ControlTableKey ,\nProcessName,\nSourceSchemaName,\nSourceTableName,\nSourceServerName,\nSourceDatabaseName,\nSourceUserName,\nSourcePassword,\nTargetTableSchema,\nTargetTableName,\nTargetServerName,\nTargetDatabaseName,\nTargetUserName,\nTargetPassword,\nContainerName,\nDelimiter\nfrom ProcessMetadata.ControlTable\nWhere IsIncludedinExtract = 1\nand ProcessName = '@{variables('ProcessName')}'\norder by 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Extract and Populate DDL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Fetch MetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Fetch MetaData').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SourceTableName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceTableName",
										"value": {
											"value": "@item().SourceTableName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourceSchemaName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceSchemaName",
										"value": {
											"value": "@item().SourceSchemaName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourceServerName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceServerName",
										"value": {
											"value": "@item().SourceServerName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourceDatabaseName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceDatabaseName",
										"value": {
											"value": "@item().SourceDatabaseName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourceUserName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceUserName",
										"value": {
											"value": "@item().SourceUserName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SourcePassword",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourcePassword",
										"value": {
											"value": "@item().SourcePassword",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ControlTableKey",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ControlTableKey",
										"value": {
											"value": "@item().ControlTableKey",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SysQuery",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SourceTableName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourceSchemaName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourceServerName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourceDatabaseName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourceUserName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SourcePassword",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ControlTableKey",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SysQuery",
										"value": {
											"value": "select\n@{variables('ControlTableKey')} as ControlTabkleKey,\nd.name as SourceColumnDataType,\nb.column_id as OrdinalPosition,\ncase when d.name like '%numeric%' OR d.name like '%float%' OR d.name like '%decimal%' then b.precision\n    WHEN D.name LIKE '%money%' THEN 34\nelse b.max_length end as Length,\nCASE WHEN D.name LIKE '%money%' THEN 4 ELSE b.scale end as Scale,\nb.is_nullable as Nullable,\ncase when d.name like '%varchar%' then 'string'\n     when d.name like '%timestamp%' then 'string'  \n     when d.name like '%date%' then 'string'  \n     when d.name like '%time%' then 'string'  \n     when d.name like '%number%' then 'float'\n     when d.name like '%bit%' then 'string'\n     WHEN D.name LIKE '%money%' THEN 'float'\nelse d.name end as DatabricksDataTypeExternal,\ncase when d.name like '%varchar%' then 'string'\n     when d.name like '%time%' or d.name like '%date%' then 'timestamp'\n     when d.name like '%number%' then 'float'  \n     when d.name like '%bit%' then 'string'\n     WHEN D.name LIKE '%money%' THEN 'float'\nelse d.name end as DatabricksDataType,\nd.name as SQLDataType\n from sys.tables a\njoin sys.columns b\non a.object_id = b.object_id\njoin sys.schemas c\non a.schema_id = c.schema_id\njoin sys.types d\non b.system_type_id = d.system_type_id\nwhere d.name <> 'sysname'\nand a.name = '@{variables('SourceTableName')}'",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Extract DDL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SysQuery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@variables('SysQuery')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "delete from ProcessMetadata.SourceTableColumns where ControlTableKey = @{variables('ControlTableKey')}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@variables('SourceSchemaName')",
													"type": "Expression"
												},
												"TableName": {
													"value": "@variables('SourceTableName')",
													"type": "Expression"
												},
												"ServerName": {
													"value": "@variables('SourceServerName')",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@variables('SourceDatabaseName')",
													"type": "Expression"
												},
												"UserName": {
													"value": "@variables('SourceUserName')",
													"type": "Expression"
												},
												"Password": {
													"value": "@variables('SourcePassword')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "ProcessMetadata",
												"TableName": "SourceTableColumns",
												"ServerName": {
													"value": "@item().TargetServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@item().TargetDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@item().TargetUserName",
													"type": "Expression"
												},
												"Password": {
													"value": "@item().TargetPassword",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"ProcessName": {
						"type": "string"
					}
				},
				"variables": {
					"ProcessName": {
						"type": "String"
					},
					"SourceTableName": {
						"type": "String"
					},
					"SourceSchemaName": {
						"type": "String"
					},
					"SourceServerName": {
						"type": "String"
					},
					"SourceDatabaseName": {
						"type": "String"
					},
					"SourceUserName": {
						"type": "String"
					},
					"SourcePassword": {
						"type": "String"
					},
					"SysQuery": {
						"type": "String"
					},
					"ControlTableKey": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azure Extract"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AZDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicAzureDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicAzureDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AZDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicAzureDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DynamicAzureDatabase_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "rmcelhinnyKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().Password",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rmcelhinnyKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rmcelhinnyKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('rmcelhinnyKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		}
	]
}